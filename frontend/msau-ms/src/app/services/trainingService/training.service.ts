import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { Observable, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Course } from 'src/app/models/Course';
import { Training } from 'src/app/models/Training';
import { Email } from 'src/app/models/Email';

@Injectable({
  providedIn: 'root'
})
export class TrainingService {

  courseService: number;
  private trainingUrl = "/api/training/";
  private trainerUrl = this.trainingUrl + 'trainer/';
  private studentUrl = this.trainingUrl + 'student/';

  
  httpOptions = {
    headers: new HttpHeaders({'Content-Type': 'application/json'})
  };

  constructor(
    private http: HttpClient,
    ) { }

  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // To send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  getTrainingForTrainer(trainerId: number): Observable<Training[]>{
    return this.http.get<Training[]>(this.trainerUrl + trainerId).pipe(
      catchError(this.handleError<Training[]>(`getTrainingForTrainer = ${trainerId}`, []))
    );
  }

  getTrainingForStudent(studentId: number): Observable<Training[]>{
    return this.http.get<Training[]>(this.studentUrl + studentId).pipe(
      catchError(this.handleError<Training[]>(`getTrainingForTrainer = ${studentId}`, []))
    );
  }

  addTraining(training: Training): Observable<Training>{
    return this.http.post<Training>(this.trainingUrl + 'add/', training, this.httpOptions).pipe(
      catchError(this.handleError<Training>('addTraining'))
    );
  }

  addFeedback(training: Training): Observable<any>{
    return this.http.post<any>(this.trainingUrl + 'update/', training, this.httpOptions).pipe(
      catchError(this.handleError<any>('updateFeedback'))
    );
  }

  sendMail(course: Course, emailId: string, date: string): Observable<any>{
    console.log('Sending Mail with message');
    const subject = 'MSAU - Course Management System Autogenerated Mail';
    console.log(course);
    let mail = new Email();
    mail.courseName = course.name;
    mail.courseDescription = course.description;
    mail.courseLocation = course.location;
    mail.courseSkills = course.skills;
    mail.coursePrerequisites = course.prerequisites;
    mail.emailId = emailId;
    date = new Date(date).toLocaleDateString("en-GB")
    mail.datetime = date;
    mail.trainerName = sessionStorage.getItem('name');
    mail.emailSubject = subject;

    return this.http.post<any>(this.trainingUrl + 'mail/', mail).pipe(
      catchError(this.handleError<any>('Email'))
    );
  }

  trainingForm: FormGroup = new FormGroup({
    courseId: new FormControl(''),
    trainerId: new FormControl('',Validators.required),
    datetime: new FormControl('',Validators.required),
  });

  feedbackForm: FormGroup = new FormGroup({
    trainingId: new FormControl(''),
    feedback: new FormControl('', Validators.required)
  });
}
